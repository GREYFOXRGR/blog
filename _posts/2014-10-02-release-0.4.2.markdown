---
layout: post
title:  "Polymer 0.4.2 Released!"
date:   2014-10-02 21:17:00
categories: releases
author: polymer-team
---
_We announce significant releases here on the blog, highlighting the major new features as well as breaking changes. Bear in mind, Polymer is in Developer Preview as we continue to explore the new world of Web Components, and these releases may have particularly high entropy. As always, we'd love to get your feedback, issues, and PR's, so tweet us [@polymer](https://twitter.com/polymer) or contribute to the [Github](https://github.com/Polymer)._

Lots of new element features included in this release, as well as some <a href="#breaking-changes">breaking changes</a> to be aware of:

### _New_  Major upgrade for `core-list`

`core-list` like you've never seen it before. This release includes a major performance and feature upgrade for `core-list`, which includes an API change.

_Changed template model structure_

Item templates in the list now bind to template models, structured as:

{% raw %}
    {
        index: 0,           // list index for this item
        selected: false,    // selection state for this item
        model: {            // user data corresponding to data[index]
            /* user data */
        }
    }
{% endraw %}

So given the following data:

{% raw %}
    var data = [
        {name: 'Bob', checked: true},
        {name: 'Tim', checked: false}
        ...
    ]
{% endraw %}

You could render the list as follows, where the `name` and `checked` properties will be bound from the `model` object:

{% raw %}
    <core-list data="{{data}}" height="80">
        <template>
            <div class="{{ {selected: selected} | tokenList }}">
                List row: {{ index }}, Name: {{ model.name }} 
                <input type="checkbox" checked="{{ model.checked }}">
            </div>
        </template>
    </core-list>
{% endraw %}

The new `core-list` system sees immensely improved scrolling performance on all platforms.

### _New_  Introducing `core-image`

The new `core-image` element provides useful options for preloading and sizing behavior not found in your vanilla `<img>` tag.

Features include:

- `preload`: Prevents the browser from rendering the image until it is fully loaded. The element's `background-color` can be set as a placeholder, or its `placeholder` property can be set to a URL or data-URI for a placeholder image.
- `fade`: When `preload` is set, causes the placeholder to fade out and be replaced by the rendered image.
- `sizing`: Displays the image as either cropped (`cover`) or letterboxed (`contain`)

Your basic image:
{% raw %}
    <core-image src="http://lorempixel.com/400/400">
    </core-image>
{% endraw %}

A light-gray background fading in to the image:
{% raw %}
    <core-image style="width:400px; height:400px; background-color: lightgray;" 
                sizing="cover" 
                preload 
                fade 
                src="http://lorempixel.com/600/400">
    </core-image>
{% endraw %}

Letterboxed:
{% raw %}
    <core-image style="width:400px; height:400px" 
                sizing="contain" 
                src="http://lorempixel.com/600/400">
    </core-image>
{% endraw %}

### Breaking changes to `paper-button` <a name="breaking-changes">&nbsp;</a>

There are a few important breaking API changes to `paper-button` to make it simpler and more consistent:

- `raisedButton` attribute is now just `raised`
- `icon` and `label` attributes are deprecated. Use `<core-icon>` inside the `paper-button`, and put the label in light DOM.

Here's an example of the changes at work:

{% raw %}
    <paper-button raised>
        <core-icon icon="arrow"></core-icon>
        My button
    </paper-button>
{% endraw %}

These changes add greater flexibility to the component, and make adding a11y features much more straightforward.

As Polymer and the Elements are both in Developer Preview, these types of changes will come relatively frequently - though we don't make breaking changes lightly as we're trying to nail down the right developer handles for these elements.

We'll do our best to continue specifically calling out these types of changes as the elements evolve.

### `core-tooltip` now more accessible, keyboard, and mobile friendly

The `core-tooltip` now extends `paper-focusable`, to get down/disabled/keyboard states.


### New Polymer guides: Debugging tips and tricks and Polymer helper methods

We've added two helpful new documentation guides to the Polymer site, on [Debugging Tips and Tricks](http://www.polymer-project.org/docs/polymer/debugging.html) and [Polymer Helper Methods](http://www.polymer-project.org/docs/polymer/helpers.html).

Struggling to debug your custom elements, and ending up with the dreaded blank page? [Debugging tips and tricks](http://www.polymer-project.org/docs/polymer/debugging.html) walks through the most important tools to help you get your Polymer project running smoothly.

Did you know you can use `Polymer.mixin` to provide shared behavior between Polymer objects? Or that you can dynamically import HTML files with `Polymer.import`? Learn about Polymer's many useful helper methods on the new [Polymer Helper Methods](http://www.polymer-project.org/docs/polymer/helpers.html) docs page.

### We're fully on the HTTPS train

Access your Polymer securely, at [https://www.polymer-project.org](https://www.polymer-project.org) and [https://blog.polymer-project.org](https://blog.polymer-project.org). 

